individual_stats$IE_freq = scale(individual_stats$IE_freq)
individual_stats$IE_infreq = scale(individual_stats$IE_infreq)
#exclude subjects where P(stay)=1 or 0 on any condition (transition*reward)
decision_subj_summary = group_by(all_subj_df, lag_transition, lag_FB, id) %>% summarise('P_stay' = mean(stay)-1)
exclude_subj = decision_subj_summary$id[decision_subj_summary$P_stay==1]
all_subj_df = all_subj_df[!is.element(all_subj_df$id,exclude_subj),]
individual_stats = individual_stats[!is.element(individual_stats$id,exclude_subj),]
#model stay based on FB and stay probability
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = all_subj_df)
summary(decision_rs)
decision_rs_mixed = glmer(stay ~ lag_FB * lag_transition + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_mixed)
decision_rs_infreq = glmer(stay ~ lag_FB * lag_transition * IE_infreq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_infreq)
decision_rs_freq = glmer(stay ~ lag_FB * lag_transition * IE_freq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_freq)
individual_stats$r_M_based = coef(decision_rs_mixed)$id[,4]
individual_stats = gather(individual_stats,"condition","IE",starts_with("IE"))
#extract P(stay) for transition x reward and confint
inv_logit = function(x) {exp(x)/(1+exp(x))}
ci = data.frame(confint(decision_rs_mixed, method = "Wald"))
ci_by_condition = data.frame(matrix(c(ci['(Intercept)',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',],
ci['(Intercept)',] + ci['lag_transitionrare',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',] + ci['lag_transitionrare',] + ci['lag_FBUnrewarded:lag_transitionrare',]),
4,byrow=T))
ci_by_condition$ci25 = as.numeric(ci_by_condition$X1)
ci_by_condition$ci975 = as.numeric(ci_by_condition$X2)
ci_by_condition = ci_by_condition[,3:4]
ci_by_condition=data.frame(lapply(ci_by_condition,inv_logit))
n=length(unique(all_subj_df$id))
decision_summary = group_by(decision_subj_summary,lag_transition, lag_FB) %>% summarise('P_stay' = mean(P_stay))
decision_summary$SE = sqrt(decision_summary$P_stay*(1-decision_summary$P_stay)/n)
decision_summary$P_stay_model =inv_logit(predict(decision_rs_mixed,decision_summary,re.form=~0))
decision_summary = cbind(decision_summary,ci_by_condition)
RT_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt))
ggplot(data = RT_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-sdRT, ymax = meanRT+sdRT))
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay_model, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = ci25, ymax = ci975)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Model Predictions") + theme_bw()
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = P_stay-SE, ymax = P_stay+SE)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(.3, .9)) + ggtitle("Actual Data") + theme_bw()
ggplot(data = decision_subj_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
facet_wrap(~id*lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Actual Data by Subject") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm) + facet_grid(.~condition) +xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
individual_stats
stroop_files = list.files(path = "../Data", pattern="*stroop.csv", full.names = T)
decision_files = list.files(path = "../Data", pattern="*decision.csv", full.names = T)
#df for group level statistics
all_subj_df = data.frame()
all_subj_stroop = data.frame()
#record IE and model-based indices for each subject
individual_stats = data.frame()
for (i in 1:(length(stroop_files))) {
s_df = read.csv(stroop_files[i])
d_df = read.csv(decision_files[i])
#*********************
#stroop analysis
#*********************
#remove practice
s_df = s_df[s_df$type %in% c('frequent','infrequent'),]
#convert logical strings to logical values
s_df$correct = s_df$correct == 'True'
s_df$congruent= s_df$congruent == 'True'
s_df$repeat_stim= s_df$repeat_stim == 'True'
s_df_clean = s_df[s_df$correct == T,]
#log transform rt's to remove skew, and z-transform across all correct trials
s_df_clean$rt_logZ = scale(log(s_df_clean$rt))
stroop_rs = lm(rt_logZ ~ congruent * type + repeat_stim, data = s_df_clean)
#extract the subject specific IE scores
IE_freq = stroop_rs$coefficients[2]
IE_infreq = stroop_rs$coefficients[2] + stroop_rs$coefficients[5]
#and add them as regressors to the decision dataframe
d_df$IE_freq = IE_freq
d_df$IE_infreq = IE_infreq
#add to all_subj_stroop
all_subj_stroop = rbind(all_subj_stroop,s_df_clean)
#remove practice trials and only use trials where the subject actually responded
d_df_clean = d_df[d_df$type == 'task' & d_df$FB!=-1,]
#refactor dataframe
cat = sapply(d_df_clean, is.factor)
d_df_clean[cat] = lapply(d_df_clean[cat], factor)
d_df_clean$id = factor(d_df_clean$id)
d_df_clean$fs_choice = as.factor(d_df_clean$fs_choice)
d_df_clean$ss_choice = as.factor(d_df_clean$ss_choice)
d_df_clean$stay = d_df_clean$fs_choice == lag(d_df_clean$fs_choice)
d_df_clean$stay = factor(d_df_clean$stay, levels = c(FALSE,TRUE), labels = c("Switch","Stay"))
d_df_clean$lag_transition = lag(d_df_clean$transition)
d_df_clean$FB = factor(d_df_clean$FB, levels = c(1,0), labels = c("Rewarded","Unrewarded"))
d_df_clean$lag_FB = lag(d_df_clean$FB)
#remove first row because we are interested in stayes
d_df_clean=d_df_clean[-1,]
#get model-free, model-based index for each subject
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = d_df_clean)
stats = data.frame('id' = d_df_clean$id[1],
'IE_freq' = IE_freq,
'IE_infreq' = IE_infreq,
'M_free' = coefficients(decision_rs)[2],
'M_based' = coefficients(decision_rs)[4])
individual_stats = rbind(individual_stats, stats)
#concatenate for group analysis
all_subj_df = rbind(all_subj_df,d_df_clean)
}
gather(individual_stats,"condition","IE",starts_with("IE"))
individual_stats$r_M_based = coef(decision_rs_mixed)$id[,4]
individual_stats = individual_stats[!is.element(individual_stats$id,exclude_subj),]
individual_stats
class(individual_stats)
row.names(individual_stats)
row.names(all_subj_df)
row.names(individual_stats)
row.names(individual_stats) = seq(21)
row.names(individual_stats)
row.names(individual_stats) = seq(nrow(individual_stats))
individual_stats
gather(individual_stats,"condition","IE",starts_with("IE"))
individual_stats$r_M_based = coef(decision_rs_mixed)$id[,4]
individual_stats = gather(individual_stats,"condition","IE",starts_with("IE"))
individual_stats
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm) + facet_grid(.~condition) +xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
stroop_files = list.files(path = "../Data", pattern="*stroop.csv", full.names = T)
decision_files = list.files(path = "../Data", pattern="*decision.csv", full.names = T)
#df for group level statistics
all_subj_df = data.frame()
all_subj_stroop = data.frame()
#record IE and model-based indices for each subject
individual_stats = data.frame()
for (i in 1:(length(stroop_files))) {
s_df = read.csv(stroop_files[i])
d_df = read.csv(decision_files[i])
#*********************
#stroop analysis
#*********************
#remove practice
s_df = s_df[s_df$type %in% c('frequent','infrequent'),]
#convert logical strings to logical values
s_df$correct = s_df$correct == 'True'
s_df$congruent= s_df$congruent == 'True'
s_df$repeat_stim= s_df$repeat_stim == 'True'
s_df_clean = s_df[s_df$correct == T,]
#log transform rt's to remove skew, and z-transform across all correct trials
s_df_clean$rt_logZ = scale(log(s_df_clean$rt))
stroop_rs = lm(rt_logZ ~ congruent * type + repeat_stim, data = s_df_clean)
#extract the subject specific IE scores
IE_freq = stroop_rs$coefficients[2]
IE_infreq = stroop_rs$coefficients[2] + stroop_rs$coefficients[5]
#and add them as regressors to the decision dataframe
d_df$IE_freq = IE_freq
d_df$IE_infreq = IE_infreq
#add to all_subj_stroop
all_subj_stroop = rbind(all_subj_stroop,s_df_clean)
#remove practice trials and only use trials where the subject actually responded
d_df_clean = d_df[d_df$type == 'task' & d_df$FB!=-1,]
#refactor dataframe
cat = sapply(d_df_clean, is.factor)
d_df_clean[cat] = lapply(d_df_clean[cat], factor)
d_df_clean$id = factor(d_df_clean$id)
d_df_clean$fs_choice = as.factor(d_df_clean$fs_choice)
d_df_clean$ss_choice = as.factor(d_df_clean$ss_choice)
d_df_clean$stay = d_df_clean$fs_choice == lag(d_df_clean$fs_choice)
d_df_clean$stay = factor(d_df_clean$stay, levels = c(FALSE,TRUE), labels = c("Switch","Stay"))
d_df_clean$lag_transition = lag(d_df_clean$transition)
d_df_clean$FB = factor(d_df_clean$FB, levels = c(1,0), labels = c("Rewarded","Unrewarded"))
d_df_clean$lag_FB = lag(d_df_clean$FB)
#remove first row because we are interested in stayes
d_df_clean=d_df_clean[-1,]
#get model-free, model-based index for each subject
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = d_df_clean)
stats = data.frame('id' = d_df_clean$id[1],
'IE_freq' = IE_freq,
'IE_infreq' = IE_infreq,
'M_free' = coefficients(decision_rs)[2],
'M_based' = coefficients(decision_rs)[4])
individual_stats = rbind(individual_stats, stats)
#concatenate for group analysis
all_subj_df = rbind(all_subj_df,d_df_clean)
}
#Scale IE scores
all_subj_df$IE_freq = scale(all_subj_df$IE_freq)
all_subj_df$IE_infreq = scale(all_subj_df$IE_infreq)
individual_stats$IE_freq = scale(individual_stats$IE_freq)
individual_stats$IE_infreq = scale(individual_stats$IE_infreq)
#exclude subjects where P(stay)=1 or 0 on any condition (transition*reward)
decision_subj_summary = group_by(all_subj_df, lag_transition, lag_FB, id) %>% summarise('P_stay' = mean(stay)-1)
exclude_subj = decision_subj_summary$id[decision_subj_summary$P_stay==1]
all_subj_df = all_subj_df[!is.element(all_subj_df$id,exclude_subj),]
individual_stats = individual_stats[!is.element(individual_stats$id,exclude_subj),]
row.names(individual_stats) = seq(nrow(individual_stats))
#model stay based on FB and stay probability
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = all_subj_df)
summary(decision_rs)
decision_rs_mixed = glmer(stay ~ lag_FB * lag_transition + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_mixed)
decision_rs_infreq = glmer(stay ~ lag_FB * lag_transition * IE_infreq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_infreq)
decision_rs_freq = glmer(stay ~ lag_FB * lag_transition * IE_freq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_freq)
#extract model-based index to plot against IE
individual_stats$r_M_based = coef(decision_rs_mixed)$id[,4]
individual_stats = gather(individual_stats,"condition","IE",starts_with("IE"))
#extract P(stay) for transition x reward and confint
inv_logit = function(x) {exp(x)/(1+exp(x))}
ci = data.frame(confint(decision_rs_mixed, method = "Wald"))
ci_by_condition = data.frame(matrix(c(ci['(Intercept)',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',],
ci['(Intercept)',] + ci['lag_transitionrare',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',] + ci['lag_transitionrare',] + ci['lag_FBUnrewarded:lag_transitionrare',]),
4,byrow=T))
ci_by_condition$ci25 = as.numeric(ci_by_condition$X1)
ci_by_condition$ci975 = as.numeric(ci_by_condition$X2)
ci_by_condition = ci_by_condition[,3:4]
ci_by_condition=data.frame(lapply(ci_by_condition,inv_logit))
n=length(unique(all_subj_df$id))
decision_summary = group_by(decision_subj_summary,lag_transition, lag_FB) %>% summarise('P_stay' = mean(P_stay))
decision_summary$SE = sqrt(decision_summary$P_stay*(1-decision_summary$P_stay)/n)
decision_summary$P_stay_model =inv_logit(predict(decision_rs_mixed,decision_summary,re.form=~0))
decision_summary = cbind(decision_summary,ci_by_condition)
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm) + facet_grid(.~condition) +xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
stroop_files = list.files(path = "../Data", pattern="*stroop.csv", full.names = T)
decision_files = list.files(path = "../Data", pattern="*decision.csv", full.names = T)
#df for group level statistics
all_subj_df = data.frame()
all_subj_stroop = data.frame()
#record IE and model-based indices for each subject
individual_stats = data.frame()
for (i in 1:(length(stroop_files))) {
s_df = read.csv(stroop_files[i])
d_df = read.csv(decision_files[i])
#*********************
#stroop analysis
#*********************
#remove practice
s_df = s_df[s_df$type %in% c('frequent','infrequent'),]
#convert logical strings to logical values
s_df$correct = s_df$correct == 'True'
s_df$congruent= s_df$congruent == 'True'
s_df$repeat_stim= s_df$repeat_stim == 'True'
s_df_clean = s_df[s_df$correct == T,]
#log transform rt's to remove skew, and z-transform across all correct trials
s_df_clean$rt_logZ = scale(log(s_df_clean$rt))
stroop_rs = lm(rt_logZ ~ congruent * type + repeat_stim, data = s_df_clean)
#extract the subject specific IE scores
IE_freq = stroop_rs$coefficients[2]
IE_infreq = stroop_rs$coefficients[2] + stroop_rs$coefficients[5]
#and add them as regressors to the decision dataframe
d_df$IE_freq = IE_freq
d_df$IE_infreq = IE_infreq
#add to all_subj_stroop
all_subj_stroop = rbind(all_subj_stroop,s_df_clean)
#remove practice trials and only use trials where the subject actually responded
d_df_clean = d_df[d_df$type == 'task' & d_df$FB!=-1,]
#refactor dataframe
cat = sapply(d_df_clean, is.factor)
d_df_clean[cat] = lapply(d_df_clean[cat], factor)
d_df_clean$id = factor(d_df_clean$id)
d_df_clean$fs_choice = as.factor(d_df_clean$fs_choice)
d_df_clean$ss_choice = as.factor(d_df_clean$ss_choice)
d_df_clean$stay = d_df_clean$fs_choice == lag(d_df_clean$fs_choice)
d_df_clean$stay = factor(d_df_clean$stay, levels = c(FALSE,TRUE), labels = c("Switch","Stay"))
d_df_clean$lag_transition = lag(d_df_clean$transition)
d_df_clean$FB = factor(d_df_clean$FB, levels = c(1,0), labels = c("Rewarded","Unrewarded"))
d_df_clean$lag_FB = lag(d_df_clean$FB)
#remove first row because we are interested in stayes
d_df_clean=d_df_clean[-1,]
#get model-free, model-based index for each subject
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = d_df_clean)
stats = data.frame('id' = d_df_clean$id[1],
'IE_freq' = IE_freq,
'IE_infreq' = IE_infreq,
'M_free' = coefficients(decision_rs)[2],
'M_based' = coefficients(decision_rs)[4])
individual_stats = rbind(individual_stats, stats)
#concatenate for group analysis
all_subj_df = rbind(all_subj_df,d_df_clean)
}
all_subj_df$IE_freq = scale(all_subj_df$IE_freq)
all_subj_df$IE_infreq = scale(all_subj_df$IE_infreq)
individual_stats$IE_freq = scale(individual_stats$IE_freq)
individual_stats$IE_infreq = scale(individual_stats$IE_infreq)
decision_subj_summary = group_by(all_subj_df, lag_transition, lag_FB, id) %>% summarise('P_stay' = mean(stay)-1)
exclude_subj = decision_subj_summary$id[decision_subj_summary$P_stay==1]
all_subj_df = all_subj_df[!is.element(all_subj_df$id,exclude_subj),]
stroop_files = list.files(path = "../Data", pattern="*stroop.csv", full.names = T)
decision_files = list.files(path = "../Data", pattern="*decision.csv", full.names = T)
#df for group level statistics
all_subj_df = data.frame()
all_subj_stroop = data.frame()
#record IE and model-based indices for each subject
individual_stats = data.frame()
for (i in 1:(length(stroop_files))) {
s_df = read.csv(stroop_files[i])
d_df = read.csv(decision_files[i])
#*********************
#stroop analysis
#*********************
#remove practice
s_df = s_df[s_df$type %in% c('frequent','infrequent'),]
#convert logical strings to logical values
s_df$correct = s_df$correct == 'True'
s_df$congruent= s_df$congruent == 'True'
s_df$repeat_stim= s_df$repeat_stim == 'True'
s_df_clean = s_df[s_df$correct == T,]
#log transform rt's to remove skew, and z-transform across all correct trials
s_df_clean$rt_logZ = scale(log(s_df_clean$rt))
stroop_rs = lm(rt_logZ ~ congruent * type + repeat_stim, data = s_df_clean)
#extract the subject specific IE scores
IE_freq = stroop_rs$coefficients[2]
IE_infreq = stroop_rs$coefficients[2] + stroop_rs$coefficients[5]
#and add them as regressors to the decision dataframe
d_df$IE_freq = IE_freq
d_df$IE_infreq = IE_infreq
#add to all_subj_stroop
all_subj_stroop = rbind(all_subj_stroop,s_df_clean)
#remove practice trials and only use trials where the subject actually responded
d_df_clean = d_df[d_df$type == 'task' & d_df$FB!=-1,]
#refactor dataframe
cat = sapply(d_df_clean, is.factor)
d_df_clean[cat] = lapply(d_df_clean[cat], factor)
d_df_clean$id = factor(d_df_clean$id)
d_df_clean$fs_choice = as.factor(d_df_clean$fs_choice)
d_df_clean$ss_choice = as.factor(d_df_clean$ss_choice)
d_df_clean$stay = d_df_clean$fs_choice == lag(d_df_clean$fs_choice)
d_df_clean$stay = factor(d_df_clean$stay, levels = c(FALSE,TRUE), labels = c("Switch","Stay"))
d_df_clean$lag_transition = lag(d_df_clean$transition)
d_df_clean$FB = factor(d_df_clean$FB, levels = c(1,0), labels = c("Rewarded","Unrewarded"))
d_df_clean$lag_FB = lag(d_df_clean$FB)
#remove first row because we are interested in stayes
d_df_clean=d_df_clean[-1,]
#get model-free, model-based index for each subject
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = d_df_clean)
stats = data.frame('id' = d_df_clean$id[1],
'IE_freq' = IE_freq,
'IE_infreq' = IE_infreq,
'M_free' = coefficients(decision_rs)[2],
'M_based' = coefficients(decision_rs)[4])
individual_stats = rbind(individual_stats, stats)
#concatenate for group analysis
all_subj_df = rbind(all_subj_df,d_df_clean)
}
decision_subj_summary = group_by(all_subj_df, lag_transition, lag_FB, id) %>% summarise('P_stay' = mean(stay)-1)
exclude_subj = decision_subj_summary$id[decision_subj_summary$P_stay==1]
all_subj_df = all_subj_df[!is.element(all_subj_df$id,exclude_subj),]
individual_stats = individual_stats[!is.element(individual_stats$id,exclude_subj),]
row.names(individual_stats) = seq(nrow(individual_stats))
#Scale IE scores
all_subj_df$IE_freq = scale(all_subj_df$IE_freq)
all_subj_df$IE_infreq = scale(all_subj_df$IE_infreq)
individual_stats$IE_freq = scale(individual_stats$IE_freq)
individual_stats$IE_infreq = scale(individual_stats$IE_infreq)
individual_stats
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = all_subj_df)
summary(decision_rs)
decision_rs_mixed = glmer(stay ~ lag_FB * lag_transition + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_mixed)
decision_rs_infreq = glmer(stay ~ lag_FB * lag_transition * IE_infreq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_infreq)
individual_stats$r_M_based = coef(decision_rs_mixed)$id[,4]
individual_stats
gather(individual_stats,"condition","IE",starts_with("IE"))
individual_stats = gather(individual_stats,"condition","IE",starts_with("IE"))
#extract P(stay) for transition x reward and confint
inv_logit = function(x) {exp(x)/(1+exp(x))}
ci = data.frame(confint(decision_rs_mixed, method = "Wald"))
ci_by_condition = data.frame(matrix(c(ci['(Intercept)',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',],
ci['(Intercept)',] + ci['lag_transitionrare',],
ci['(Intercept)',] + ci['lag_FBUnrewarded',] + ci['lag_transitionrare',] + ci['lag_FBUnrewarded:lag_transitionrare',]),
4,byrow=T))
ci_by_condition$ci25 = as.numeric(ci_by_condition$X1)
ci_by_condition$ci975 = as.numeric(ci_by_condition$X2)
ci_by_condition = ci_by_condition[,3:4]
ci_by_condition=data.frame(lapply(ci_by_condition,inv_logit))
n=length(unique(all_subj_df$id))
decision_summary = group_by(decision_subj_summary,lag_transition, lag_FB) %>% summarise('P_stay' = mean(P_stay))
decision_summary$SE = sqrt(decision_summary$P_stay*(1-decision_summary$P_stay)/n)
decision_summary$P_stay_model =inv_logit(predict(decision_rs_mixed,decision_summary,re.form=~0))
decision_summary = cbind(decision_summary,ci_by_condition)
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm) + facet_grid(.~condition) +xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .1) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2, geom = "ribbon") + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
```
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2, geom = "ribbon") + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, geom = "ribbon") + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
RT_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt))
RT_summary
ggplot(data = RT_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-sdRT, ymax = meanRT+sdRT))
n
RT_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt)/sqrt(n))
ggplot(data = RT_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-sdRT, ymax = meanRT+sdRT))
ggplot(data = RT_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-2*sdRT, ymax = meanRT+2*sdRT))
stroop_subj_summary = group_by(all_subj_stroop, type, congruent, id) %>% summarise('meanRT' = mean(rt))
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~id*type)
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_wrap(~id*type)
ggplot(data = stroop_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-2*sdRT, ymax = meanRT+2*sdRT)) + theme_bw()
stroop_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt)/sqrt(n))
stroop_subj_summary = group_by(all_subj_stroop, type, congruent, id) %>% summarise('meanRT' = mean(rt))
ggplot(data = stroop_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-2*sdRT, ymax = meanRT+2*sdRT)) + theme_bw()
ggsave('../Plot/Stroop_plot.pdf')
ggsave(file = '../Plot/Stroop_plot.pdf')
last_plot()
ggsave(file = '../Plot/Stroop_plot.eps')
ggsave(file = '../Plots/Stroop_plot.pdf')
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') +
facet_wrap(~id*type)  + theme_bw()
ggsave(file = '../Plots/Stroop_individual_plot.pdf')
stroop_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt)/sqrt(n))
stroop_subj_summary = group_by(all_subj_stroop, type, congruent, id) %>% summarise('meanRT' = mean(rt))
ggplot(data = stroop_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-2*sdRT, ymax = meanRT+2*sdRT)) + theme_bw()
ggsave(file = '../Plots/Stroop.pdf')
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') +
facet_wrap(~id*type)  + theme_bw()
ggsave(file = '../Plots/Stroop_bySubj.pdf')
#Decision plots
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay_model, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = ci25, ymax = ci975)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Model Predictions") + theme_bw()
ggsave(file = '../Plots/Decision_Performance_Model.pdf')
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = P_stay-SE, ymax = P_stay+SE)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(.3, .9)) + ggtitle("Actual Data") + theme_bw()
ggsave(file = '../Plots/Decision_Performancel.pdf')
ggplot(data = decision_subj_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
facet_wrap(~id*lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Actual Data by Subject") + theme_bw()
ggsave(file = '../Plots/Decision_Performancel_bySubj.pdf')
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggsave(file = '../Plots/Decision_vs_Stroop.pdf')
decision_summary
.73*.27/n
sqrt(.73*.27/n)
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = P_stay-SE, ymax = P_stay+SE)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Actual Data") + theme_bw()
ggsave(file = '../Plots/Decision_Performancel.pdf')
decision_summary$P_stay*(1-decision_summary$P_stay)/n
.73*.27/n
?esticon
esitcon(decision_rs_infreq)
esticon(decision_rs_infreq)
str(decision_rs_infreq)
fixef((decision_rs_mixed))
fixef((decision_rs_mixed))
esticon(decision_rs_infreq,c(0,0,0,1))
esticon(decision_rs_infreq,c(0,0,1))
esticon(decision_rs_infreq,c(0,0,1,1))
esticon(decision_rs_mixed,c(0,0,1,1))
esticon(decision_rs_mixed,c(0,0,0,1))
decision_rs_freq
esticon(decision_rs_infreq,c(0,0,0,0,0,0,0,1))
esticon(decision_rs_freq,c(0,0,0,0,0,0,0,1))
esticon(decision_rs_freq,c(0,0,0,0,0,0,0,1),beta0=-.29)
esticon(decision_rs_freq,c(0,0,0,0,0,0,0,1),beta0=-.4)
esticon(decision_rs_freq,c(0,0,0,0,0,0,0,1),beta0=-.-.29)
esticon(decision_rs_freq,c(0,0,0,0,0,0,0,1),beta0=-.29)
esticon(decision_rs_infreq,c(0,0,0,0,0,0,0,1),beta0=.0698577)
decision_rs_freq = glmer(stay ~ lag_FB * lag_transition * IE_freq + lag_FB * lag_transition * IE_infreq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_freq)
summary(decision_rs_freq)
fixef(decison_rs_freq)
decision_rs_IE = glmer(stay ~ lag_FB * lag_transition * IE_freq + lag_FB * lag_transition * IE_infreq  + (lag_FB*lag_transition | id), family = binomial, data = all_subj_df, control=glmerControl(optimizer="bobyqa"))
fixef(decision_rs_IE)
source('~/.active-rstudio-document', echo=TRUE)
esitcon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1))
esticon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1))
str(esticon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1)))
esticon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1))$Pr(>|X^2|)
esticon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1))$beta0
esticon(decision_rs_IE,c(0,0,0,0,0,0,0,0,0,0,1,-1))$Estimate
decision_rs_IE
summary(decision_rs_IE)
summary(decision_rs_IE)
fixef(decision_rs_IE)
fixef(decision_rs_IE)[1]
fixef(decision_rs_IE)[2]
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') +
facet_wrap(~id*type)  + theme_bw()
#Stroop, for confidence
stroop_summary = group_by(all_subj_stroop, type, congruent) %>% summarise('meanRT' = mean(rt), 'sdRT' = sd(rt)/sqrt(n))
stroop_subj_summary = group_by(all_subj_stroop, type, congruent, id) %>% summarise('meanRT' = mean(rt))
ggplot(data = stroop_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') + facet_grid(.~type) +
geom_linerange(aes(ymin = meanRT-2*sdRT, ymax = meanRT+2*sdRT)) + theme_bw()
ggsave(file = '../Plots/Stroop.pdf')
ggplot(data = stroop_subj_summary, aes(x = congruent, y = meanRT, fill = congruent )) + geom_bar(stat = 'identity') +
facet_wrap(~id*type)  + theme_bw()
ggsave(file = '../Plots/Stroop_bySubj.pdf')
#Decision plots
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay_model, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = ci25, ymax = ci975)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Model Predictions") + theme_bw()
ggsave(file = '../Plots/Decision_Performance_Model.pdf')
ggplot(data = decision_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
geom_linerange(aes(ymin = P_stay-SE, ymax = P_stay+SE)) + facet_grid(.~lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Actual Data") + theme_bw()
ggsave(file = '../Plots/Decision_Performance.pdf')
ggplot(data = decision_subj_summary, aes(x = lag_transition, y = P_stay, fill = lag_transition)) + geom_bar(stat = 'identity') +
facet_wrap(~id*lag_FB) + ylab("Stay Probability") + xlab("") +
coord_cartesian(ylim = c(0, 1)) + ggtitle("Actual Data by Subject") + theme_bw()
ggsave(file = '../Plots/Decision_Performance_bySubj.pdf')
ggplot(data = individual_stats, aes(x=IE, y = r_M_based, color = condition)) + geom_point() + geom_smooth(method = lm, alpha = .2) + xlab("Incongruency Effect (z score") + ylab("Model-based index") + theme_bw()
ggsave(file = '../Plots/Decision_vs_Stroop.pdf')
