or = Task)) +
geom_point() + geom_smooth(aes(group = 1)
or = Task)) +
geom_point() + geom_smooth(aes(group = 1)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_point() + geom_smooth(aes(group = 1)) + facet_grid(. ~Task)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_point() + stat_smooth() + facet_grid(. ~Task)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_point() + stat_smooth(aes(group=1)) + facet_grid(. ~Task)
str(d2a)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_box() +  facet_grid(. ~Task)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task) + theme_classic()
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d0)
print(summary(rs.lmer1))
contrasts(d2a$valence)
contrasts(d2a$Valence)
?contr.treatment
contrasts(do$Valence) = cbind(c(-1,0,1), c(-1,2,-1))
contrasts(d2a$Valence) = cbind(c(-1,0,1), c(-1,2,-1))
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d0)
print(summary(rs.lmer1))
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d0)
print(summary(rs.lmer1))
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs.lmer1))
contrasts(d2a$Valence) = contr.treatment(3, base=2)
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs.lmer1))
contrasts(d2a$Valence) = contr.treatment(3, base=2)
contrasts(d2a$Valence)
contrasts(d2a$Valence) = cbind(c(-1,0,1), c(-1,2,-1))
contrasts(d2a$Valence)
print(summary(rs.lmer1))
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs.lmer1))
ggplot(data = d2a, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
contrasts(d2a$Task)
d2a$Task='cued'
d2a = ex4
contrasts(d2a$Valence) = cbind(c(-1,0,1), c(-1,2,-1))
d2a$Task=='cued'
d2a$Task=='Cued'
d2a$Recall(d2a$Task=='Cued')
d2a$Recall(,d2a$Task=='Cued')
d2a$Recall[,d2a$Task=='Cued']
d2a$Recall[d2a$Task=='Cued',]
d2a$Recall
d2a$Recall[1,2]
d2a$Recall(1,2)
d2a$Recall
d2a$Recall(c(1,2),)
d2a = ex4
contrasts(d2a$Valence) = contr.treatment(3, base=2)
contrasts(d2a$Valence)
rs.lmer1 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs.lmer1))
rs2a_1 = lmer(Recall ~ Task + (1 | Subject), d2a)
print(summary(rs2a_1))
rs2a_1 = lmer(Recall ~ Valence + (1 | Subject), d2a)
print(summary(rs2a_1))
ask*
ask*
ask*
ask*
rs2a_1 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs2a_1))
rs2a_2 = lmer(Recall ~ Task + (1 | Subject), d2a)
anova(rs2a_1,rs2a_2)
rs2a_1 = lmer(Recall ~ Task + (1 | Subject), d2a)
print(summary(rs2a_1))
rs2a_2 = lmer(Recall ~ Task+Recall + (1 | Subject), d2a)
print(summary(rs2a_2))
rs2a_3 = lmer(Recall ~ Task*Recall + (1 | Subject), d2a)
print(summary(rs2a_3))
print(anova(rs2a_1,rs2a_2,rs2a_3))
rs2a_2 = lmer(Recall ~ Task+Recall + (1 | Subject), d2a)
rs2a_1 = lmer(Recall ~ Task + (1 | Subject), d2a)
print(summary(rs2a_1))
rs2a_2 = lmer(Recall ~ Task+Valencel + (1 | Subject), d2a)
print(summary(rs2a_2))
rs2a_1 = lmer(Recall ~ Task + (1 | Subject), d2a)
print(summary(rs2a_1))
rs2a_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2a)
print(summary(rs2a_2))
rs2a_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2a)
print(summary(rs2a_3))
print(anova(rs2a_1,rs2a_2,rs2a_3))
rs2a_1 = lmer(Recall ~ Task + (1 | Subject), d2a)
print(summary(rs2a_1))
contrasts(d2a$Task)
print(anova(rs2a_1,rs2a_2,rs2a_3))
V
V
rs.lmer2 = lmer(Recall ~ Valence*Task + (1 + Valence + Task | Subject), d2a)
print(summary(rs.lmer2))
rs.lmer2 = lmer(Recall ~ Task + (1  Task | Subject), d2a)
print(summary(rs.lmer2))
rs.lmer2 = lmer(Recall ~ Task + (1  Task | Subject), d2a)
rs.lmer2 = lmer(Recall ~ Task + (1 +  Task | Subject), d2a)
print(summary(rs.lmer2))
rs2a_4 = lmer(Recall ~ Task+Valence (1 + Valence + Task |         Subject), d2a)
print(summary(rs2a_4))
rs2a_4 = lmer(Recall ~ Task+Valence (1 + Valence + Task |         Subject), d2a)
str(d2a)
rs2a_4 = lmer(Recall ~ Task+Valence (1 + Valence + Task |         Subject), d2a)
rs2a_4 = lmer(Recall ~ Task + Valence (1 + Valence + Task |         Subject), d2a)
rs2a_4 = lmer(Recall ~ Task  (1 + Valence + Task |         Subject), d2a)
d2a
rs2a_4 = lmer(Recall ~ Task + Valence + (1 + Valence + Task |         Subject), d2a)
print(summary(rs2a_4))
anova(rs2a_1,rs2a_4)
print(anova(rs2a_1,rs2a_4))
ex4L <- read.table("~/Courses/Psych252-Stats/Week 8/Week 8-data/ex4L.txt", header=TRUE, quote="\"")
View(ex4L)
d1 = ex4
d1 = ex4L
ex4L
sink('rkv-ex4.r')
d2b = ex4L
str(d2b)
ggplot(data = d2b, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
print(anova(rs2b_1,rs2b_2,rs2b_3))
print(anova(rs2b_1,rs2b_2,rs2b_3))
)
print(summary(rs2b_3))
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
print(anova(rs2b_1,rs2b_2,rs2b_3))
str(d2b)
ggplot(data = d2b, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
library(ggplot2)
ggplot(data = d2b, aes(Valence, Recall, color = Task)) +
geom_boxplot() +  facet_grid(. ~Task)
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
d2a = read.csv('http://web.stanford.edu/class/psych252/data/ex4.csv')
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
contrasts(d2b$Valence)
contrasts(d2b$Valence) = contr.treatment(3, base=2)
contrasts(d2b$Valence)
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
print(anova(rs2b_1,rs2b_2,rs2b_3)
)
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
rs2b_2 = lmer(Recall ~ Task+Valence + (1 | Subject), d2b)
print(summary(rs2b_2))
rs2b_3 = lmer(Recall ~ Task*Valence + (1 | Subject), d2b)
print(summary(rs2b_3))
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
print(anova(rs2b_4, rs2b_5)))
print(anova(rs2b_4, rs2b_5))
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
print(anova(rs2b_1,rs2b_4, rs2b_5))
print(anova(rs2a_1,rs2a_4))
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
rs2b_1 = lmer(Recall ~ Task + (1 | Subject), d2b)
print(summary(rs2b_1))
print(summary(rs2b_4))
print(summary(rs2b_5))
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task | Subject), d2b)
print(summary(rs2b_4))
d2b
str(d2b)
Valence
Valence
rs2b_4 = lmer(Recall ~ Task+Valence + (1 + Task + Valence| Subject), d2b)
print(summary(rs2b_4))
rs2b_5 = lmer(Recall ~ Task*Valence + (1 + Task*Valence| Subject), d2b)
print(summary(rs2b_5))
print(anova(rs2b_1,rs2b_4, rs2b_5))
print(anova(rs2b_4, rs2b_5))
d03= read.csv('http://web.stanford.edu/class/psych252/data/timeflies.csv')
d3= read.csv('http://web.stanford.edu/class/psych252/data/timeflies.csv')
str(d3)
summary(d3)
str(d3)
rowMeans(d3)
?rowMeans
d3$comclips1.rat
d3$comclip1.rat
d3$comclip*
len(d3)
length(d3)
str(d3)
rowmeans(d3)
rowMeans(d3)
mean(d3$statsclip10.len)
rowMeans(d3, dims=2)
rowMeans(d3, dims=1)
length(d3$statsclip10.len)
colMeans(d3)
mean(d3$statsclip10.len)
d3$X
colMeans(d3)
colMeans(d3)[2]
colMeans(d3)[2:11]
colMeans(d3)[2:11:22]
colMeans(d3)[2:11,22]
colMeans(d3)[c(2:11,22)]
colMeans(d3)[2:11]
colMeans(d3)[2:11]
d3
rowMeans(d3[2:12])
rowMeans(d3[2:12]))
cbind(rowMeans(d3[2:12]), rowMeans(d3[2:12]), rowMeans(d3[2:12]),
rowMeans(d3[2:12]))
cbind(rowMeans(d3[2:11]), rowMeans(d3[12:21]), rowMeans(d3[22:31]),
rowMeans(d3[32:41]))
d3$sumScores= cbind(rowMeans(d3[2:11]), rowMeans(d3[12:21]), rowMeans(d3[22:31]),
rowMeans(d3[32:41]))
d3
d3_a = d3[,c(1,42:45)]
length(d3)
d3
str(d3)
d3
d3[,42]
d3_a = d3[,c(1,42)]
d3_a
d3_a[,2]
d3_a[,2][1]
d3_a[,2][,1]
d3$sumScores= c(rowMeans(d3[2:11]), rowMeans(d3[12:21]), rowMeans(d3[22:31]),
rowMeans(d3[32:41]))
d3= read.csv('http://web.stanford.edu/class/psych252/data/timeflies.csv')
d3$comclips.rat = rowMeans(d3[2:11])
d3$statsclips.rat = rowMeans(d3[12:21])
d3$comclips.len = rowMeans(d3[22:31])
d3$statsclips.len = rowMeans(d3[32:41])
str(d3)
d3[,42:45]
?boxplot
boxplot(d3$comclips.rat)
boxplot(d3[,42:45])
boxplot(d3[,42:43])
boxplot(d3[,42:43])
title('hey')
boxplot(d3[,44:45])
title('Length')
boxplot(d3[,42:43])
title('Fun rating')
boxplot(d3[,44:45])
title('Length')
d3$diff.rat = d3$comclips.rat - d3$statsclips.rat
d3$diff.len = d3$comclips.len - d3$statsclips.len
d3$diff.rat
d3$comclips.rat
d3$statsclips.rat
scale(d3$comclips.rat+d3$statsclips.rat,scale=F)
d3$scalesum = scale(d3$comclips.rat+d3$statsclips.rat,scale=F)
rs3_1 = lm(d3$diff.rat ~ 1, data = d3)
print(rs3_1)
summary(rs3_1)
rs3_3 = lm(diff.len ~ diff.rat, data = d3)
summary(rs3_3)
d3$scalesu.rat = scale(d3$comclips.rat+d3$statsclips.rat,scale=F)
d3$scalesum.rat = scale(d3$comclips.rat+d3$statsclips.rat,scale=F)
rs3_3 = lm(diff.len ~ diff.rat + scalesum.rat, data = d3)
summary(rs3_3)
rs3_1 = lm(diff.rat ~ 1, data = d3)
summary(rs3_1)
rs3_2 = lm(diff.len ~ 1, data = d3)
summary(rs3_2)
rs3_4 = lm(diff.len ~ diff.rat, data = d3)
summary(rs3_4)
rs3_4 = lm(diff.len ~ diff.rat + scalesum.rat, data = d3)
summary(rs3_4)
d2a = read.table('http://www.stanford.edu/class/psych252/data/ex4.txt')
d2a
str(d2a)
str(d2b)
d0 = read.csv('http://web.stanford.edu/class/psych252/data/kv0.csv')
d0$subidr = factor(d0$subidr)
summary(d0)
str(d0)
head(d0)
d1 = melt(d0)
names(d1)[3] = 'nsol'
names(d1)[4] = 'score'
d1$nsol = factor(d1$nsol, labels = c('one', 'two','many'))
library('ggplot2')
library('lme4')
library('reshape2')
library('languageR')
library('lmerTest')
d0 = read.csv('http://web.stanford.edu/class/psych252/data/kv0.csv')
d0$subidr = factor(d0$subidr)
summary(d0)
str(d0)
head(d0)
d1 = melt(d0)
names(d1)[3] = 'nsol'
names(d1)[4] = 'score'
d1$nsol = factor(d1$nsol, labels = c('one', 'two','many'))
contrasts(d1$attnr) = c(-1, 1)
contrasts(d1$nsol) = cbind(c(-1, 0, 1), c(1, -2, 1))
contrasts(d1$attnr) = c(-1, 1)
contrasts(d1$nsol) = cbind(c(-1, 0, 1), c(1, -2, 1))
rs1a_4 = lmer(score ~ attnr * nsol_num + (1 | subidr), data = d1, REML = F)
d1$nsol_num = as.numeric(d1$nsol)
rs1a_4 = lmer(score ~ attnr * nsol_num + (1 | subidr), data = d1, REML = F)
summary(rs1a_4)
lmerTest::summary(rs1a_4)
d3= read.csv('http://web.stanford.edu/class/psych252/data/timeflies.csv')
d3
d3$comclips.rat = rowMeans(d3[2:11])
d3$statsclips.rat = rowMeans(d3[12:21])
d3$comclips.len = rowMeans(d3[22:31])
d3$statsclips.len = rowMeans(d3[32:41])
d3$comclips.len
d3$statsclips.len
d0 = read.csv('http://web.stanford.edu/class/psych252/data/kv0.csv')
d0$subidr = factor(d0$subidr)
summary(d0)
str(d0)
head(d0)
d1 = melt(d0)
names(d1)[3] = 'nsol'
names(d1)[4] = 'score'
d1$nsol = factor(d1$nsol, labels = c('one', 'two','many'))
#effect code contrasts for attention and ncol factors
contrasts(d1$attnr) = c(-1, 1)
contrasts(d1$nsol) = cbind(c(-1, 0, 1), c(1, -2, 1))
#Plot our data for fixed effects
ggplot(data = d1, aes(nsol, score, color = attnr)) +
geom_point() + geom_smooth(aes(group=1)) +
facet_grid(. ~ attnr) + theme_classic() + ggtitle('condition by attention vs. Performance')
ggplot(data = d1, aes(nsol, score, color = attnr)) +
geom_point() + geom_smooth(aes(group=1)) +
facet_grid(. ~ attnr) + theme_classic() + ggtitle('condition by attention vs. Performance')
ggplot(data = d1, aes(x = as.numeric(nsol), y = score, color = attnr)) +
facet_wrap(~subidr+attnr, ncol = 10, scales = 'free') + theme_classic() +
geom_point() + stat_smooth(method = 'lm') + ggtitle('Performance vs. condition by subjects and attention')
ggplot(data = d1, aes(x = as.numeric(nsol), y = score, color = attnr)) +
facet_wrap(~subidr+attnr, ncol = 5, scales = 'free') + theme_classic() +
geom_point() + stat_smooth(method = 'lm') + ggtitle('Performance vs. condition by subjects and attention')
View(cor.table)
install.packages('lattice')
rm ~/.RData
install.packages('lattice')
install.packages('lme4')
install.packages('lmerTest')
install.packages('effects')
install.packages('ggplot2')
install.packages('doBy')
install.packages('dplyr')
install.packages('tidyr')
install.packages('psych')
library(ggplot2)
library(dplyr)
library(tidyr)
library(lme4)
library(doBy)
library(psych)
setwd("C:/Users/Ian/Box Sync/Programming/Experiments/Otto_etal_2014_Replication/Analysis")
#load data, extract stroop incongruent effect for both conditions,
#clean up datasets, and concatenate all subjects
stroop_files = list.files(path = "../Data", pattern="*stroop.csv", full.names = T)
decision_files = list.files(path = "../Data", pattern="*decision.csv", full.names = T)
#df for group level statistics
all_subj_df = data.frame()
all_subj_stroop = data.frame()
#record IE and model-based indices for each subject
individual_stats = data.frame()
for (i in 1:(length(stroop_files))) {
s_df = read.csv(stroop_files[i])
d_df = read.csv(decision_files[i])
#*********************
#stroop analysis
#*********************
#remove practice
s_df = s_df[s_df$type %in% c('frequent','infrequent'),]
#convert logical strings to logical values
s_df$correct = factor(s_df$correct == 'True')
s_df$type = factor(s_df$type)
s_df$congruent= factor(s_df$congruent == 'True', labels = c("Incongruent", "Congruent"))
s_df$repeat_stim= factor(s_df$repeat_stim == 'True')
#only keep correct trials
s_df_clean = s_df[s_df$correct == T,]
#log transform rt's to remove skew, and z-transform across all correct trials
s_df_clean$rt_logZ = scale(log(s_df_clean$rt))
#model RT by congruent * type, including a nusiance variable for repeated stim
stroop_rs = lm(rt_logZ ~ congruent * type + repeat_stim, data = s_df_clean)
#extract the subject specific IE scores
IE_freq = stroop_rs$coefficients[2]
IE_infreq = stroop_rs$coefficients[2] + stroop_rs$coefficients[5]
#convert to ms (reveres scale, take inverse log)
scale_center = attributes(s_df_clean$rt_logZ)$'scaled:center'
scale_sd = attributes(s_df_clean$rt_logZ)$'scaled:scale'
IE_freq_ms = exp(sum(stroop_rs$coefficients[1:2])*scale_sd+scale_center) -
exp(sum(stroop_rs$coefficients[1])*scale_sd+scale_center)
IE_infreq_ms = exp(sum(stroop_rs$coefficients[c(1,2,3,5)])*scale_sd+scale_center) -
exp(sum(stroop_rs$coefficients[c(1,3)])*scale_sd+scale_center)
#add to all_subj_stroop
all_subj_stroop = rbind(all_subj_stroop,s_df_clean)
#*********************
#Decision analysis
#*********************
#remove practice trials and only use trials where the subject actually responded
d_df_clean = d_df[d_df$type == 'task' & d_df$FB!=-1,]
#refactor dataframe
cat = sapply(d_df_clean, is.factor)
d_df_clean[cat] = lapply(d_df_clean[cat], factor)
d_df_clean$fs_choice = as.factor(d_df_clean$fs_choice)
d_df_clean$ss_choice = as.factor(d_df_clean$ss_choice)
#Create new variables:
d_df_clean$stay = d_df_clean$fs_choice == lag(d_df_clean$fs_choice)
d_df_clean$stay = factor(d_df_clean$stay, levels = c(FALSE,TRUE), labels = c("Switch","Stay"))
d_df_clean$transition = factor(d_df_clean$transition, levels = c('rare','common'))
d_df_clean$lag_transition = lag(d_df_clean$transition)
d_df_clean$FB = factor(d_df_clean$FB, levels = c(0,1), labels = c("Unrewarded","Rewarded"))
d_df_clean$lag_FB = lag(d_df_clean$FB)
#remove first row because we are interested in stay's
#(first row will have NAs due to lagged trial sequence)
d_df_clean=d_df_clean[-1,]
subj_summary = group_by(d_df_clean, lag_transition,lag_FB) %>% summarise('P_stay' = mean(stay)-1)
#exclude subjects where P(stay)=1 or 0 on any condition (transition*reward)
#This was not an exclusion criteria in the original paper, but is required for appropriate model estimates
#(model doesn't converge otherwise). Note for future: make sure every subject samples the entire task space
#If P_stay == 1 in any condition, exclude subjects (same for P == 0, but unnecessary for this sample)
if (sum(subj_summary$P_stay==1)==0) {
#get model-free, model-based index for each subject
#NOTE - this is not how original authors calculate the indices. They extract the random
#effects from the mixed model, which I do below
decision_rs = glm(stay ~ lag_FB * lag_transition , family = binomial, data = d_df_clean)
stats = data.frame('id' = d_df_clean$id[1],
'IE_freq' = IE_freq,
'IE_infreq' = IE_infreq,
'ms_IE_freq' = IE_freq_ms,
'ms_IE_infreq' = IE_infreq_ms,
'M_free' = coefficients(decision_rs)[2],
'M_based' = coefficients(decision_rs)[4])
individual_stats = rbind(individual_stats, stats)
#concatenate for group analysis
all_subj_df = rbind(all_subj_df,d_df_clean)
}
}
#This gets the P(stay) for each subject for each condition
decision_subj_summary = group_by(all_subj_df, id, lag_transition, lag_FB) %>%
summarise('P_stay' = mean(stay)-1, 'IE_infreq' = mean(IE_infreq), 'IE_freq' = mean(IE_freq))
#Scale IE scores
individual_stats$IE_freq = scale(individual_stats$IE_freq)
individual_stats$IE_infreq = scale(individual_stats$IE_infreq)
#join the IE scores to the main dataset for analysis
all_subj_df = merge(all_subj_df,individual_stats[,1:3])
all_subj_df$id = factor(all_subj_df$id)
row.names(all_subj_df) = seq(nrow(all_subj_df))
decision_rs_mixed = glmer(stay ~ lag_FB * lag_transition +
(lag_FB * lag_transition | id),
family = binomial(), data = subset(all_subj_df,id!=22),
control=glmerControl(optimizer="bobyqa"))
summary(decision_rs_mixed)
a=ranef(decision_rs_mixed)$id
a
library(lattice)
dotplot(a[,1:2])
str(a)
str(all_subj_df)
dotplot(ranef(decision_rs_mixed))
all_subj_df$id
